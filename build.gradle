plugins {
	id 'org.springframework.boot'
	id 'io.spring.dependency-management' version '1.0.9.RELEASE'
	id "com.google.cloud.tools.jib"
	id "jacoco"
	id "org.sonarqube"
	id 'java'
	id "io.spring.nohttp"
}

group = 'hr.ecc.corepoc'
version = '0.0.1'
sourceCompatibility = '11'

repositories {
	mavenCentral()
}

defaultTasks "bootRun"

apply from: "gradle/docker.gradle"
//apply from: "gradle/sonar.gradle"

if (project.hasProperty("prod")) {
	apply from: "gradle/profile_prod.gradle"
} else {
	apply from: "gradle/profile_dev.gradle"
}

jacoco {
	toolVersion = "0.8.5"
}

checkstyle {
	toolVersion "${checkstyle_version}"
	configFile file("checkstyle.xml")
	checkstyleTest.enabled = false
}

nohttp {
	source.include "build.gradle", "README.md"
}

springBoot {
	mainClassName = "hr.ecc.corepoc.demo.EccCorePocDemoApplication"
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compile 'org.springframework:spring-orm';
	implementation ("io.springfox:springfox-swagger2:${swagger_version}") {
		exclude module: "mapstruct"
	}
	implementation "io.springfox:springfox-swagger-ui:${swagger_version}";

	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
}

test {
	useJUnitPlatform()
	exclude "**/*IT*", "**/*IntTest*"

	testLogging {
		events 'FAILED', 'SKIPPED'
	}
	// uncomment if the tests reports are not generated
	// ignoreFailures true
	reports.html.enabled = false
}

task integrationTest(type: Test) {
	useJUnitPlatform()
	description = "Execute integration tests."
	group = "verification"
	include "**/*IT*", "**/*IntTest*"

	testLogging {
		events 'FAILED', 'SKIPPED'
	}
	// uncomment if the tests reports are not generated
	// ignoreFailures true
	reports.html.enabled = false
}

check.dependsOn integrationTest
task testReport(type: TestReport) {
	destinationDir = file("$buildDir/reports/tests")
	reportOn test
}

task integrationTestReport(type: TestReport) {
	destinationDir = file("$buildDir/reports/tests")
	reportOn integrationTest
}

task cleanResources(type: Delete) {
	delete "build/resources"
}

jacocoTestReport {
	executionData tasks.withType(Test)
	classDirectories.from = files(sourceSets.main.output.classesDirs)
	sourceDirectories.from = files(sourceSets.main.java.srcDirs)

	reports {
		xml.enabled = true
	}
}

compileJava.dependsOn processResources
processResources.dependsOn bootBuildInfo